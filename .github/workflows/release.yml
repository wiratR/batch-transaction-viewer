name: Release (tag)

on:
  push:
    tags:
      - 'v*'   # ex: v0.0.8

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Node deps
        shell: bash
        run: npm ci

      # ===== Python for bundling denylist_reader (no Python needed on end-user) =====
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python deps
        shell: bash
        run: |
          if [[ -f python/requirements.txt ]]; then
            python -m pip install -r python/requirements.txt
          else
            python -m pip install pyinstaller flatbuffers
          fi

      - name: Build denylist_reader binary (PyInstaller)
        shell: bash
        run: |
          pyinstaller -F python/denylist_reader.py -n denylist_reader
          mkdir -p python/bin
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            mv dist/denylist_reader.exe python/bin/denylist_reader.exe
          else
            mv dist/denylist_reader python/bin/denylist_reader
            chmod +x python/bin/denylist_reader
          fi

      # ===== Version from tag =====
      - name: Derive version from tag
        id: version
        shell: bash
        run: |
          RAW="${GITHUB_REF_NAME}"         # ex: v0.0.8
          VERSION="${RAW#v}"               # -> 0.0.8
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Semver: $VERSION"

      - name: Compute 4-part Windows file version
        id: winver
        shell: bash
        run: |
          V="${{ steps.version.outputs.version }}"
          V="${V%%-*}"
          IFS='.' read -r A B C D <<< "$V"
          A="${A:-0}"; B="${B:-0}"; C="${C:-0}"; D="${D:-0}"
          [[ -z "$D" ]] && D="0"
          echo "filever=$A.$B.$C.$D" >> "$GITHUB_OUTPUT"

      # (ถ้าไม่มีไอคอนใน repo ก็ปล่อยให้ใช้ default ได้)
      - name: Build app (no publish)
        shell: bash
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
        run: |
          npx electron-builder --publish never \
            -c.extraMetadata.version="${{ steps.version.outputs.version }}" \
            -c.buildVersion="${{ steps.winver.outputs.filever }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          if-no-files-found: ignore
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*-win-*.exe
            dist/*.AppImage
            dist/*.blockmap
            dist/latest*.yml

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List files (debug)
        shell: bash
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/*.dmg
            dist/*.zip
            dist/*-win-*.exe
            dist/*.AppImage
            dist/*.blockmap
            dist/latest*.yml
          fail_on_unmatched_files: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
