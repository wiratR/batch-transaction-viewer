name: Release (tag)

on:
  push:
    tags:
      - 'v*'   # ex: v0.0.4

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ตัด 'v' ออก -> VERSION (เช่น v0.0.4 -> 0.0.4)
      - name: Derive version from tag
        id: version
        shell: bash
        run: |
          RAW="${GITHUB_REF_NAME}"
          VERSION="${RAW#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Semver: $VERSION"

      # คำนวณ Windows FileVersion เป็นตัวเลข 4 ส่วน (เติม .0 ถ้าขาด)
      - name: Compute 4-part Windows file version
        id: winver
        shell: bash
        run: |
          V="${{ steps.version.outputs.version }}"
          # ตัด pre-release / build metadata ทิ้ง (เช่น 1.2.3-beta -> 1.2.3)
          V="${V%%-*}"
          IFS='.' read -r A B C D <<< "$V"
          A="${A:-0}"; B="${B:-0}"; C="${C:-0}"; D="${D:-0}"
          if [[ -z "$D" ]]; then D="0"; fi
          FILEVER="$A.$B.$C.$D"
          echo "filever=$FILEVER" >> $GITHUB_OUTPUT
          echo "FILEVER=$FILEVER"
      
      # Build โดยกำหนด version/buildVersion อย่างถูกต้อง (ไม่มี 'v')
      - name: Build app (no publish)
        shell: bash
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"   # ปิด auto codesign
        run: |
          npx electron-builder --publish never \
            -c.extraMetadata.version="${{ steps.version.outputs.version }}" \
            -c.buildVersion="${{ steps.winver.outputs.filever }}" \
            -c.win.fileVersion="${{ steps.winver.outputs.filever }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          if-no-files-found: error
          path: |
            dist/**
            dist/latest*.yml

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List downloaded files (debug)
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: dist/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
