name: Release (tag)

on:
  push:
    tags:
      - 'v*'   # ex: v0.0.6

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        shell: bash

      # ==== เวอร์ชันจาก tag ====
      - name: Derive version from tag
        id: version
        shell: bash
        run: |
          RAW="${GITHUB_REF_NAME}"     # ex: v0.0.6
          VERSION="${RAW#v}"           # -> 0.0.6
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "Semver: $VERSION"

      - name: Compute 4-part Windows file version
        id: winver
        shell: bash
        run: |
          V="${{ steps.version.outputs.version }}"   # 0.0.6[-prerelease]
          V="${V%%-*}"                               # drop pre-release if any
          IFS='.' read -r A B C D <<< "$V"
          A="${A:-0}"; B="${B:-0}"; C="${C:-0}"; D="${D:-0}"
          [[ -z "$D" ]] && D="0"
          FILEVER="$A.$B.$C.$D"
          echo "filever=$FILEVER" >> "$GITHUB_OUTPUT"
          echo "FILEVER=$FILEVER"

      # ==== เตรียมไอคอน (ถ้าไม่อยาก gen ใน CI ให้ commit build/icon.icns, build/icon.ico, build/icons/* แทนได้) ====
      - name: Ensure build directories
        shell: bash
        run: |
          mkdir -p build/icons
          ls -la assets || true

      # Linux icons (PNG หลายขนาด)
      - name: Install ImageMagick (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

      - name: Prepare icons (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          if [[ -f assets/icon.png ]]; then
            for s in 16 32 48 64 128 256 512; do
              magick assets/icon.png -resize ${s}x${s} "build/icons/${s}x${s}.png"
            done
          else
            echo "assets/icon.png not found; Linux will use default icon"
          fi

      # macOS .icns
      - name: Prepare icons (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [[ -f assets/icon.png ]]; then
            mkdir -p build/icon.iconset
            SRC=assets/icon.png
            for s in 16 32 128 256 512; do
              sips -z $s $s "$SRC" --out "build/icon.iconset/icon_${s}x${s}.png" >/dev/null
              s2=$((s*2))
              sips -z $s2 $s2 "$SRC" --out "build/icon.iconset/icon_${s}x${s}@2x.png" >/dev/null
            done
            iconutil -c icns build/icon.iconset -o build/icon.icns
            rm -rf build/icon.iconset
          else
            echo "assets/icon.png not found; macOS will use default icon"
          fi

      # Windows .ico
      - name: Install ImageMagick (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install imagemagick --no-progress -y
        shell: powershell

      - name: Prepare icons (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          if [[ -f assets/icon.png ]]; then
            magick assets/icon.png -define icon:auto-resize=256,128,64,48,32,16 build/icon.ico
          else
            echo "assets/icon.png not found; Windows will use default icon"
          fi

      # ==== Build (ไม่มีบรรทัด '-' ลอย ๆ, ใช้ bash, ไม่มี \r) ====
      - name: Build app (no publish)
        shell: bash
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"   # ปิด auto codesign บน macOS
        run: |
          npx electron-builder --publish never \
            -c.extraMetadata.version="${{ steps.version.outputs.version }}" \
            -c.buildVersion="${{ steps.winver.outputs.filever }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          if-no-files-found: error
          path: |
            dist/**
            dist/latest*.yml

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List downloaded files (debug)
        shell: bash
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: dist/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
